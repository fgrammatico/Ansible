---
AWSTemplateFormatVersion: 2010-09-09
Description: 'MediaMonks Hosting Template: 2019-05'
# New in 2019-07
# - Add Python Version parameter.
# New in 2019-05
# - Add ElastiCache t3 instance support
# - Create SqsPolicy when Sysops is present.
# - Add new PHP version `7.3`.
# - Add option for serverless support
# - Add aws_ses_region variable to group vars.
# - Add ElastiCache endpoint to group vars.
# - Create a Redis AUTH Token when In-Transit encryption is selected.
# - Use only one NAT Gateway on non-production environments.
# - Not allow incomming request on HTTP when there is CloudFront.
# - Enable end-to-end encryption from the load balancer to the web servers.
# - Redis encryption parameter to set at-rest and/or in-transit options.
# - Do not re-create MasterUsername when a second environment (testing) is being created with a database.
# - Store master username and password in the stack SSM parameter instead of the project when not production is being created with a database.
# - Allow SysopsRole to list SES identities (used for generate-wiki-html).
# New in 2019-04 (Now Requires mm-hosting-buckets 2019-04)
# - Add cloudfront:ListDistributions permissions to the CloudFront policy
# - Add permissions for serverless (in case no webservers are set up)
# - Add custom parameter group for mysql
# - Update sysops ip ranges
# - Change certificate creation options
# - No longer automatically add Aliasses/Cnames to CloudFront distribution when no certificate has been generated//selected
# - Add support for db.t3 RDS instances
# - When sysops is present but no web-servers, the serverless policy is added.
# New in 2019-03
# - Enable NAT Gateways and Private Networks in China
# New in 2018-12 (Now Requires mm-hosting-buckets 2018-12)
# - Add support for a genrated admin path
# - Add support for node 10
# - Add new BA IP addresses
# - Fix rpm issue with new Amazon Linux Amis
# - Now creates it's own ElbCertificate
# - Optionally creates and condifures a CloudFront certificate
# - Add db.t3 instances as allowed database instance type.
# - Default sysops and webserver instances to t3.
# New in 2018-10 (Now Requires mm-hosting-buckets 2018-10)
# - Allow developers to do CloudFront invalidations using IAM credentials
# - Update London IP address
# - Allow sysops to list route53 hosted zones
# - Allow sysops to ssm-messages control channel access
# - Add support for t3 instances
# - New role policy to read SSM parameters
# - Generate database credentials and app secrets using lambda function
# - Update awscli for sysops on launch
# New in 2018-03 (Now Requires mm-hosting-buckets 2018-03)
# - Add support for php7.2
# - Use node v8 by default
# - Enable RDS encryption by default
# - Setup S3 bucket in website configuration if S3 Only
# - Manually select AZ's when setting up a new stack
# - Optionally setup a Route53 health check
# New in 2018-02 (Now Requires mm-hosting-buckets 2018-02)
# - Fix issue with S3 endpoint when there is no VPC to setup
# - Change PostgreSQL hostname to postgresql.internal.monkapps.com
# - Fix PHP version selection
# - Use AMI from SSM Parameter
# New in 2017-09 (Now Requires mm-hosting-buckets 2017-09)
# - Update sysops launch configuration to support ansible 2.4
# - Update sns endpont to notifications sns queue
# - Add software versions choice for php / node
# - Add the Policy statements for the sysops to be able to access the hosting/logs/archive buckets
# - Add VPC Endpoint to connect internally to S3
# - Add option for Database Encryption
# - Update MySQL to version 5.7
# - Remove Dubai office from whitelists
# - Setup VPC when no sysops is required (in case of a development instance)
# - Update AMI's to amzn-ami-hvm-2017.09.1.20171103
# - Add security group descriptions
# - Add rds-whitelist:port tag to rds instance so the rds-whitelist lambda whitelists the correct port
# - Use new AWS::Partition pseudo variable
# - Update the DatabaseSecurityGroup and RedisSecurityGroup so that it doesn't break when Webservers max number is 0
# - Update the "arn:aws..." policies for SSM,SQS,SES,Cloudwatch Logs, so that China is supported as well
# - Update AMI's to amzn-ami-hvm-2017.09.0.20170930-x86_64
# - Use rds-whitelist also for other AWS accounts
# - Use new rds-whitelist lambda in hosting-buckets template
# New in 2017-07 (Now Requires mm-hosting-buckets 2017-07)
# - Specify security group names, remove unnecessary ingress rules
# - Specify sns alerts topic name
# - Make sysops optional. Now enables to setup a CF/S3 only site without a sysops/vpc/etc
# - Update ansible ec2 inventory plugin
# - No longer open port 80 on sysops if sysops has ssl
# - Add ability to create recordsets in a route53 hosted zone
# - Support PostgreSQL
# - Add ssh access from MM Bastion instance
# - Change default volume type to gp2
# - Add WebserverPurpose in Sysops launch configuration
# - Allow sysops read access to CloudWatch logs
# - Add a custom SSM policy (as the Amazon managed policy was a little too open)
# - Add a CloudFront Access Identity Policy and secured bucket policy
# New in 2017-05
# - Add SQS policy that allows access to SQS Queues that start with <{StackName>
# - Add SSM policy on servers
# - Add policy statements that allowservers appropriate access to log buckets
# - Add tags on Load Balancer TargetGroup
# - Update AMI's to amzn-ami-hvm-2017.03.1.20170623-x86_64
# - Fix issues with exotic conditions (no web servers or no s3 bucket)
# - Add an option to force an Elastic IP address for the sysops instance
# - Add IAM pollicy to allow sending emails trough SES from *@<Domainname>
# - No longer use an Elastic IP for sysops
# - Fix issue on web servers when provision is not available on sysops yet
# - Prepare for generate-wiki-html script
# - Allow sysops to invalidate CloudFront
# - Allow sysops to make Route53 record changes
# - Specify OriginSSLProtocols for CLoudFront
# New in 2017-04
# - Re-add automatic database whitelisting
# - Add Webserver Type parameter to set purpose
# - Update ViewerProtocolPolicy to always redirect to https
# - Remove StackResources.Sysops.Certificate as it is depricated
# - Allow access on tcp:80 to webservers from sysops
# - Update AMI's to amzn-ami-hvm-2017.03.0.20170401-x86_64
# - Replace Classic ELB with an Application Load Balancer
# New in 2017-01
# - Disable internal DNS in China
# - Add internal DNS hosted zone with entries for sysops, mysql, redis, elb
# - Add AWS_DEFAULT_REGION to set default region
# - Add sysops and www tags to instances in CopperEgg
# - No longer make the RDS publicly accessible in external accounts
# - Added DNS entries for ELB and sysops in external accounts
# - Now Requires mm-hosting-buckets 2017-01
# New in 2016-11
# - Updated AMI's to amzn-ami-hvm-2016.09.1.20170119-x86_64
# - Updated CloudFront alias to use UrlAbbr environment name instead of full environment name
# - Updated sns2hipchat endpoint to www.devmonks.nl
# - Updated Subnet names to include public or private
# - Updated AMI's to amzn-ami-hvm-2016.09.1.20161221-x86_64
# - Made private networks optional based on input parameter
# - Added Sysops access on https port (443) from all offices
# - Added Sysops and ELB Hostnames when deployed in MM development account
# - Introduced a new IAM Policy for S3 Bucket Access
# - Added support for eu-west-1 (London) and ca-central-1 (Canada) regions
# - Made private networks optional based on region (China)
# - Added private subnets, moved web servers to private subnets
# - Enabled http2 support for CloudFront
# - StackResources added to the group_vars
# - Added option to supply a different database host in the parameters
# - Database no longer creates a database (DatabaseName is now DatabaseHostname)
# - Allow sysops and web servers to publish messages to the SNS Notification topic
# - Allow sysops to publish CloudWatch metric data
# - Cleaned up UserData / removed unnecessary packages
# New in 2016-10
# - Updated Default AMI's to 2016.09.0.20161028
# - Enabled support for us-east-2
# - Disabled enhanced monitoring on non-prod web servers
# - Changed DNS hostnames to new naming convention
#   Requires "MediaMonks Hosting Bucket Template: 2016-11" to be deployed in the region
# - Updated ELB policy ELBSecurityPolicy to 2016-08
# - Added project tags to Auto Scaling Groups and VPC
# - Added support for ap-south-1 region
# - Added support for t2.nano
# - Added separate AssemblaHostingRepo parameter
# - Updated php to version 7
# - Updated rds mysql to version 5.7
# - Added metadata for better CloudFormation UI
# - First template in yml format
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Project }
        Parameters:
          - Project
          - Market
          - Environment
      - Label: { default: Assembla }
        Parameters:
          - AssemblaUsername
          - AssemblaPassword
          - AssemblaRepo
          - AssemblaHostingRepo
          - AnsibleRepo
      - Label: { default: VPC }
        Parameters:
          - Subnet1AZ
          - Subnet2AZ
          - PrivateNetworks
      - Label: { default: Domain }
        Parameters:
          - Domainname
          - HostedZoneId
          - Certificate
          - CustomCertificateArn
      - Label: { default: CloudFront }
        Parameters:
          - CloudFrontPriceClass
      - Label: { default: Webservers }
        Parameters:
          - WebserverPurpose
          - WebserverInstanceType
          - WebserverMinSize
          - WebserverMaxSize
      - Label: { default: Software Versions }
        Parameters:
          - PhpVersion
          - NodeVersion
          - PythonVersion
      - Label: { default: Database }
        Parameters:
          - DatabaseInstanceType
          - DatabaseEngineType
          - DatabaseMultiAZ
          - DatabaseAllocatedStorage
          - DatabaseHostname
          - DatabaseEncryption
      - Label: { default: S3 }
        Parameters:
          - S3BucketRequired
      - Label: { default: Redis }
        Parameters:
          - RedisInstanceType
          - RedisMultiAZ
          - RedisEncryption
      - Label: { default: Lambda }
        Parameters:
          - LambdaUsage
          - LambdaInVpc
      - Label: { default: Sysops }
        Parameters:
          - SysopsInstanceType
          - SysopsElasticIpRequired
      - Label: { default: Route53 Health Check }
        Parameters:
          - HealthCheckDomain
          - HealthCheckPath
          - HealthCheckSearchString
    ParameterLabels:
      Domainname:               { default: Domain name }
      AssemblaRepo:             { default: Project repo }
      AssemblaHostingRepo:      { default: Hosting repo }
      AnsibleRepo:              { default: Playbooks repo }
      AssemblaUsername:         { default: Username }
      AssemblaPassword:         { default: Password }
      CloudFrontPriceClass:     { default: Price class }
      PrivateNetworks:          { default: Private networks }
      WebserverInstanceType:    { default: Instance type }
      WebserverMinSize:         { default: Minimum size }
      WebserverMaxSize:         { default: Maximum size }
      WebserverPurpose:         { default: Type }
      DatabaseInstanceType:     { default: Instance type }
      DatabaseEngineType:       { default: Engine Type }
      DatabaseMultiAZ:          { default: Multi AZ }
      DatabaseAllocatedStorage: { default: Storage }
      DatabaseHostname:         { default: DB Hostname }
      DatabaseEncryption:       { default: Encryption }
      LambdaUsage:              { default: Lambda Usage }
      LambdaInVpc:              { default: Lambda in VPC }
      S3BucketRequired:         { default: Setup bucket }
      RedisInstanceType:        { default: Instance type }
      RedisEncryption:          { default: Encryption }
      RedisMultiAZ:             { default: Multi AZ }
      SysopsInstanceType:       { default: Instance type }
      SysopsElasticIpRequired:  { default: Elastic IP }
      HostedZoneId:             { default: Hosted zone }
      PhpVersion:               { default: PHP Version }
      NodeVersion:              { default: Node Version }
      PythonVersion:            { default: Python Version }
      HealthCheckDomain:        { default: Domain }
      HealthCheckPath:          { default: Path }
      HealthCheckSearchString:  { default: Search String }
Parameters:
  AnsibleRepo:
    Description: Import the Repository where the Ansible playbooks are for the sysops server
    Type: String
    Default: mediamonks-hosting.playbooks
  AssemblaPassword:
    Description: Assembla Password for the Ansible repo
    NoEcho: true
    Type: String
  AssemblaRepo:
    Description: svn/xxxxxxxxxxxxxxxxx/trunk OR xxxxxxxxxxx for GIT
    Type: String
    Default: ''
  AssemblaHostingRepo:
    Description: svn/xxxxxxxxxxxxxxxxx/trunk OR xxxxxxxxxxx for GIT
    Type: String
    Default: ''
  AssemblaUsername:
    Type: String
    Default: devmonk
  Subnet1AZ:
    Type: AWS::EC2::AvailabilityZone::Name
  Subnet2AZ:
    Type: AWS::EC2::AvailabilityZone::Name
  CloudFrontPriceClass:
    Type: String
    Default: none
    AllowedValues:
      - none
      - Only-US-and-Europe
      - Only-US-Europe-and-Asia
      - All-Edge-Locations-Best-Performance
  Certificate:
    Type: String
    Default: automatic
    AllowedValues:
      - none
      - automatic
      - create-only
      - custom
  CustomCertificateArn:
    Type: String
    Default: ''
    AllowedPattern: '^(arn\:aws\:acm\:us-east-1\:[0-9]+\:certificate\/[0-9a-f\-]+)?$'
    ConstraintDescription: Please provide a valid ARN of an ACM Certificate in us-east-1
  DatabaseAllocatedStorage:
    Description: GB
    Type: Number
    Default: 5
    MinValue: 5
    MaxValue: 3072
  DatabaseInstanceType:
    Type: String
    Default: none
    AllowedValues:
      - none
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m3.medium
      - db.m3.large
      - db.m3.xlarge
      - db.m3.2xlarge
      - db.r3.large
      - db.r3.xlarge
      - db.r3.2xlarge
  DatabaseEngineType:
    Type: String
    Default: MySQL
    AllowedValues:
      - MySQL
      - PostgreSQL
  DatabaseMultiAZ:
    Type: String
    Default: true
    AllowedValues: [ true, false ]
  DatabaseHostname:
    Type: String
    Default: ''
    Description: Only required when this environment is using a database from another stack
  DatabaseEncryption:
    Type: String
    Default: true
    AllowedValues: [ true, false ]
  Domainname:
    Description: Without "www."
    Type: String
    Default: domain.local
  Environment:
    Type: String
    Default: production
    AllowedValues:
      - production
      - acceptance
      - testing
      - development
      - uat # Deprecated, for backwards compatibility
  LambdaUsage:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  LambdaInVpc:
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  Market:
    Description: Two-letter country code
    Default: us
    Type: String
    MinLength: 2
    MaxLength: 24
    AllowedPattern: "[a-z]*"
    ConstraintDescription: Please enter a lower case country code
  Project:
    Description: Assembla space slug / Project tag
    Type: String
    MinLength: 2
    AllowedPattern: "[a-z0-9\\-\\.]*"
  RedisInstanceType:
    Type: String
    Default: none
    AllowedValues:
      - none
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.t3.micro
      - cache.t3.small
      - cache.t3.medium
      - cache.m3.medium
      - cache.m3.large
      - cache.m3.xlarge
      - cache.m3.2xlarge
      - cache.m5.large
      - cache.m5.xlarge
      - cache.m5.2xlarge
      - cache.m5.4xlarge
      - cache.r3.large
      - cache.r3.xlarge
      - cache.r3.2xlarge
      - cache.r3.4xlarge
      - cache.r3.8xlarge
  RedisMultiAZ:
    Type: String
    Default: false
    AllowedValues: [ true, false ]
  RedisEncryption:
    Type: String
    Default: none
    AllowedValues:
      - none
      - at-rest
      - in-transit
      - both
  S3BucketRequired:
    Type: String
    Default: true
    AllowedValues: [ true, false ]
  SysopsInstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - none
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c3.large
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c5.large
      - c5.xlarge
      - m5.large
      - m5.xlarge
  SysopsElasticIpRequired:
    Description: Only required in China, or when the sysops needs to be whitelisted somewhere, and the environment doesn't have private networks
    Type: String
    Default: false
    AllowedValues: [ true, false ]
  PrivateNetworks:
    Description: Setup private networks and NAT Gateways
    Type: String
    Default: false
    AllowedValues: [ true, false ]
  WebserverInstanceType:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - c3.large
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c5.large
      - c5.xlarge
      - m5.large
      - m5.xlarge
  WebserverMaxSize:
    Description: Set to 0 to not setup any webservers
    Type: Number
    Default: 1
  WebserverMinSize:
    Type: Number
    Default: 1
  WebserverPurpose:
    Type: String
    Default: php
    AllowedValues: [ php, python, node ]
  PhpVersion:
    Type: String
    Default: '7.3'
    AllowedValues: [ '5.5', '5.6', '7.0', '7.1', '7.2', '7.3' ]
  NodeVersion:
    Type: String
    Default: 10
    AllowedValues: [ 4, 6, 8, 10 ]
  PythonVersion:
    Type: String
    Default: '3.5'
    AllowedValues: [ '2.7', '3.5', '3.6' ]
  HostedZoneId:
    Type: String
    Default: ''
    Description: Optionally create DNS entries for CloudFront #or the Load Balancer
  HealthCheckDomain:
    Type: String
    Default: ''
    Description: Optionally setup a Route53 health check (enter domain without 'https://')
  HealthCheckPath:
    Type: String
    Default: '/'
  HealthCheckSearchString:
    Type: String
    Default: ''
    Description: Optionally search for a string in the response
  Ec2Ami:
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/mm/service/latest-linux-ami'
Conditions:
  EnvProd: !Equals [!Ref Environment, production]
  EnvNotProd: !Not [!Condition EnvProd]
  NotNow: !Equals [a, b]
  SetupInMMAccount: !Or
    - !Equals [!Ref 'AWS::AccountId', '036481243746'] # MM Main
    - !Equals [!Ref 'AWS::AccountId', '967503273541'] # MM Development
  SetupInDevAccount: !Equals [!Ref 'AWS::AccountId', '967503273541'] # MM Development
  SetupInChina: !Equals [!Ref 'AWS::Region', cn-north-1]
  SetupInUsEast1: !Equals [!Ref 'AWS::Region', us-east-1]
  SetupDns: !And
    - !Not [!Condition SetupInChina]
    - !Condition SetupVpc
  SetupElasticIp: !Or
    - !Equals [!Ref SysopsElasticIpRequired, true]
    - !Condition SetupInChina
  SetupPrivateNetworks: !Equals [!Ref PrivateNetworks, true]
  SetupSecondaryNatGateway: !And
    - !Condition SetupPrivateNetworks
    - !Condition EnvProd
  SetupCertificate: !Or
    - !Equals [!Ref Certificate, automatic]
    - !Equals [!Ref Certificate, create-only]
  SetupCertificateValidation: !And
    - !Equals [!Ref Certificate, automatic]
    - !Not [!Equals [!Ref HostedZoneId, '']]
  SetupCloudFront: !Not [!Equals [!Ref CloudFrontPriceClass, none]]
  SetupCloudFrontOriginAccessIdentity: !And
    - !Condition SetupCloudFront
    - !Not [!Condition SetupInChina] # CloudFront Access Identity is not available in China
  SetupCloudFrontCNames: !And
    - !Condition SetupCloudFront
    - !Not [!Equals [!Ref Domainname, '']]
    - !Or
      - !Equals [!Ref Certificate, 'automatic']
      - !Condition SetupCloudFrontCustomCertificate
  SetupCloudFrontCustomCertificate: !And
    - !Equals [!Ref Certificate, 'custom']
    - !Not [!Equals [!Ref CustomCertificateArn, '']]
  SetupCloudFrontDns: !And
    - !Condition SetupCloudFront
    - !Not [!Equals [!Ref HostedZoneId, '']]
  SetupCloudFrontApexDns: !And
    - !Condition SetupCloudFrontDns
    - !Condition EnvProd
  SetupLambda: !Equals [!Ref LambdaUsage, "true"]
  SetupLambdaInVpc: !And
    - !Condition SetupLambda
    - !Equals [ !Ref LambdaInVpc, "true"]
  SetupLambdaPrivateNetworks: !And
    - !Condition SetupLambdaInVpc
    - !Condition SetupPrivateNetworks
  SetupLoadBalancerDns: !And
    - !Condition SetupDns
    - !Condition SetupWebServers
  SetupLoadBalancerHttpListener: !Or # SetupInChina OR (NOT SetupCloudFront AND SetupWebServers)
    - !And
      - !Condition SetupInChina
      - !Condition SetupWebServers
    - !And
      - !Not [!Condition SetupCloudFront]
      - !Condition SetupWebServers
  SetupSysops: !Or
    - !Not [!Equals [!Ref SysopsInstanceType, none]]
    - !Condition SetupWebServers # Cannot setup web servers without sysops
  SetupVpc: !Or
    - !Condition SetupSysops
    - !Condition SetupWebServers
    - !Condition SetupDatabase
    - !Condition SetupRedis
  SetupWebServers: !Not [!Equals [!Ref WebserverMaxSize, 0]]
  SetupDatabase: !Not [!Equals [!Ref DatabaseInstanceType, none]]
  SetupDatabaseMysqlParameterGroup: !And
    - !Condition SetupDatabase
    - !Equals [!Ref DatabaseEngineType, MySQL]
  SetupDatabaseCredentials: !Or
    - !Condition SetupDatabase
    - !Not [!Equals [!Ref DatabaseHostname, '']]
  SetupDatabaseMasterCredentials: !And
    - !And [!Condition EnvProd, !Condition SetupDatabase]
    - !Equals [!Ref DatabaseHostname, '']
  SetupDatabaseDns: !And
    - !Condition SetupDns
    - !Or
      - !Condition SetupDatabase
      - !Not [!Equals [!Ref DatabaseHostname, '']]
  SetupDatabaseWhitelisting: !And
    - !Condition SetupDatabaseDns
    - !Condition EnvNotProd
  SetupRedis: !Not [!Equals [!Ref RedisInstanceType, none]]
  SetupRedisSnapShots: !Not
      - !Or
        - !Equals [!Ref RedisInstanceType, cache.t2.micro]
        - !Equals [!Ref RedisInstanceType, cache.t2.small]
        - !Equals [!Ref RedisInstanceType, cache.t2.medium]
  SetupRedisMultiAZ: !Equals [!Ref RedisMultiAZ, true]
  SetupRedisDns: !And
    - !Condition SetupDns
    - !Condition SetupRedis
  SetupRedisEncryptionAtRest: !And
    - !Condition SetupRedis
    - !Or
      - !Equals [!Ref RedisEncryption, at-rest]
      - !Equals [!Ref RedisEncryption, both]
  SetupRedisEncryptionInTransit: !And
    - !Condition SetupRedis
    - !Or
      - !Equals [!Ref RedisEncryption, in-transit]
      - !Equals [!Ref RedisEncryption, both]
  SetupS3Bucket: !Equals [!Ref S3BucketRequired, true]
  SetupS3Only: !And
    - !Condition SetupS3Bucket
    - !Not [!Condition SetupWebServers]
  SetupS3BucketEndpoint: !And
    - !Condition SetupVpc
    - !Condition SetupS3Bucket
  SetupHealthCheck: !And
    - !Not [!Condition SetupInChina]
    - !Not [!Equals [!Ref HealthCheckDomain, '']]
  SetupHealthCheckSearch: !Not [!Equals [!Ref HealthCheckSearchString, '']]
  OutputDnsRecords: !And
    - !Not [!Condition SetupCloudFrontDns]
    - !Not [!Equals [!Ref Domainname, '']]
Mappings:
  Regions:
    ap-northeast-1:
      BackupWindow: '18:00-19:00'
      MaintenanceWindow: 'wed:20:00-wed:21:00'
    ap-northeast-2:
      BackupWindow: '18:00-19:00'
      MaintenanceWindow: 'wed:20:00-wed:21:00'
    ap-south-1:
      BackupWindow: '19:00-20:00'
      MaintenanceWindow: 'wed:21:00-wed:22:00'
    ap-southeast-1:
      BackupWindow: '19:00-20:00'
      MaintenanceWindow: 'wed:21:00-wed:22:00'
    ap-southeast-2:
      BackupWindow: '19:00-20:00'
      MaintenanceWindow: 'wed:21:00-wed:22:00'
    ca-central-1:
      BackupWindow: '02:00-03:00'
      MaintenanceWindow: 'mon:04:00-mon:05:00'
    eu-central-1:
      BackupWindow: '02:00-03:00'
      MaintenanceWindow: 'mon:04:00-mon:05:00'
    eu-west-1:
      BackupWindow: '02:00-03:00'
      MaintenanceWindow: 'mon:04:00-mon:05:00'
    eu-west-2:
      BackupWindow: '02:00-03:00'
      MaintenanceWindow: 'mon:04:00-mon:05:00'
    sa-east-1:
      BackupWindow: '10:00-11:00'
      MaintenanceWindow: 'tue:12:00-tue:13:00'
    us-east-1:
      BackupWindow: '07:00-08:00'
      MaintenanceWindow: 'tue:09:00-tue:10:00'
    us-east-2:
      BackupWindow: '07:00-08:00'
      MaintenanceWindow: 'tue:09:00-tue:10:00'
    us-west-1:
      BackupWindow: '10:00-11:00'
      MaintenanceWindow: 'tue:12:00-tue:13:00'
    us-west-2:
      BackupWindow: '10:00-11:00'
      MaintenanceWindow: 'tue:12:00-tue:13:00'
    cn-north-1:
      BackupWindow: '19:00-20:00'
      MaintenanceWindow: 'wed:21:00-wed:22:00'
  SesRegions:
    us-east-1:
      region: us-east-1
    us-east-2:
      region: us-east-1
    us-west-1:
      region: us-west-2
    us-west-2:
      region: us-west-2
    ap-east-1:
      region: us-east-1
    ap-south-1:
      region: us-east-1
    ap-northeast-1:
      region: us-east-1
    ap-northeast-2:
      region: us-east-1
    ap-northeast-3:
      region: us-east-1
    ap-southeast-1:
      region: us-east-1
    ap-southeast-2:
      region: us-east-1
    ca-central-1:
      region: us-east-1
    cn-north-1:
      region: us-east-1
    cn-northwest-1:
      region: us-east-1
    eu-central-1:
      region: eu-west-1
    eu-west-1:
      region: eu-west-1
    eu-west-2:
      region: eu-west-1
    eu-west-3:
      region: eu-west-1
    eu-north-1:
      region: eu-west-1
    sa-east-1:
      region: us-west-2
  CloudFrontPriceClass:
    Only-US-and-Europe:                  { PriceClassId: PriceClass_100 }
    Only-US-Europe-and-Asia:             { PriceClassId: PriceClass_200 }
    All-Edge-Locations-Best-Performance: { PriceClassId: PriceClass_All }
  DatabaseEngines:
    MySQL:
      port: 3306
      engine: mysql
      hostname: mysql
      version: '5.7.26'
    PostgreSQL:
      port: 5432
      engine: postgres
      hostname: postgresql
      version: '9.6.2'
  Environments:
    production:   { UrlAbbr: prod }
    acceptance:   { UrlAbbr: acc }
    testing:      { UrlAbbr: test }
    development:  { UrlAbbr: dev }
    uat:          { UrlAbbr: uat }
Resources:
  # Network Infrastructure
  Vpc:
    Type: AWS::EC2::VPC
    Condition: SetupVpc
    Properties:
      CidrBlock: 172.31.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: SetupVpc
    Properties:
      CidrBlock: 172.31.32.0/20
      AvailabilityZone: !Ref Subnet1AZ
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - public' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  Subnet2:
    Type: AWS::EC2::Subnet
    Condition: SetupVpc
    Properties:
      CidrBlock: 172.31.0.0/20
      AvailabilityZone: !Ref Subnet2AZ
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: True
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - public' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  LambdaSubnet1:
    Type: AWS::EC2::Subnet
    Condition: SetupLambdaInVpc
    Properties:
      CidrBlock: 172.31.128.0/18
      AvailabilityZone: !Ref Subnet1AZ
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: !If [ SetupPrivateNetworks, False, True ]
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - lambda' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  LambdaSubnet2:
    Type: AWS::EC2::Subnet
    Condition: SetupLambdaInVpc
    Properties:
      CidrBlock: 172.31.192.0/18
      AvailabilityZone: !Ref Subnet2AZ
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: !If [ SetupPrivateNetworks, False, True ]
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - lambda' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: SetupPrivateNetworks
    Properties:
      CidrBlock: 172.31.48.0/20
      AvailabilityZone: !Ref Subnet1AZ
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: False
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - private' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: SetupPrivateNetworks
    Properties:
      CidrBlock: 172.31.16.0/20
      AvailabilityZone: !Ref Subnet2AZ
      VpcId: !Ref Vpc
      MapPublicIpOnLaunch: False
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - private' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Condition: SetupVpc
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  NetworkAclEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Condition: SetupVpc
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  NetworkAclEntryIgress:
    Type: AWS::EC2::NetworkAclEntry
    Condition: SetupVpc
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkAcl
  SubnetAclAssociation1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: SetupVpc
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref Subnet1
  SubnetAclAssociation2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Condition: SetupVpc
    Properties:
      NetworkAclId: !Ref NetworkAcl
      SubnetId: !Ref Subnet2
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: SetupVpc
    Properties:
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: SetupVpc
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
    DependsOn:
      - Vpc
      - InternetGateway
  InternetGatewayRoute:
    Type: AWS::EC2::Route
    Condition: SetupVpc
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref RouteTable
      GatewayId: !Ref InternetGateway
    DependsOn: InternetGatewayAttachment
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Condition: SetupVpc
    Properties:
      DomainName: !If
        - SetupInChina
        - !Sub '${AWS::Region}.compute.internal'
        - internal.monkapps.com
      DomainNameServers: [ AmazonProvidedDNS ]
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  DHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Condition: SetupVpc
    Properties:
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref DHCPOptions
  RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: SetupVpc
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SetupVpc
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SetupVpc
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Condition: SetupPrivateNetworks
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Condition: SetupSecondaryNatGateway
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SetupPrivateNetworks
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SetupPrivateNetworks
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !If [SetupSecondaryNatGateway, !Ref PrivateRouteTable2, !Ref PrivateRouteTable1]
  LambdaSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SetupLambdaInVpc
    Properties:
      SubnetId: !Ref LambdaSubnet1
      RouteTableId: !If
        - SetupLambdaPrivateNetworks
        - !Ref PrivateRouteTable1
        - !Ref RouteTable
  LambdaSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: SetupLambdaInVpc
    Properties:
      SubnetId: !Ref LambdaSubnet2
      RouteTableId: !If
        - SetupLambdaPrivateNetworks
        - !If [SetupSecondaryNatGateway, !Ref PrivateRouteTable2, !Ref PrivateRouteTable1]
        - !Ref RouteTable
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Condition: SetupPrivateNetworks
    Properties:
      AllocationId: !GetAtt NatGateway1ElasticIp.AllocationId
      SubnetId: !Ref Subnet1
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - ${Subnet1AZ}' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Condition: SetupSecondaryNatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2ElasticIp.AllocationId
      SubnetId: !Ref Subnet2
      Tags:
        - { Key: Name, Value: !Sub '${AWS::StackName} - ${Subnet2AZ}' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  NatGateway1ElasticIp:
    Type: AWS::EC2::EIP
    DependsOn: Vpc
    Condition: SetupPrivateNetworks
    Properties:
      Domain: vpc
  NatGateway2ElasticIp:
    Type: AWS::EC2::EIP
    DependsOn: Vpc
    Condition: SetupSecondaryNatGateway
    Properties:
      Domain: vpc
  NatGateway1Route:
    Type: AWS::EC2::Route
    Condition: SetupPrivateNetworks
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatGateway2Route:
    Type: AWS::EC2::Route
    Condition: SetupSecondaryNatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  InternalHostedZone:
    Type: AWS::Route53::HostedZone
    Condition: SetupDns
    Properties:
      Name: internal.monkapps.com.
      HostedZoneConfig:
        Comment: !Ref 'AWS::StackName'
      VPCs:
        - VPCId: !Ref Vpc
          VPCRegion: !Ref 'AWS::Region'
      HostedZoneTags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  InstanceDataInternalDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupDns
    Properties:
      HostedZoneId: !Ref InternalHostedZone
      Name: instance-data.internal.monkapps.com.
      Type: A
      TTL: 3600
      ResourceRecords: [ 169.254.169.254 ]
  # Sysops
  SysopsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: SetupSysops
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !Ref Ec2Ami
      InstanceType: !Ref SysopsInstanceType
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 20
          VolumeType: gp2
      KeyName: !Ref 'AWS::StackName'
      InstanceMonitoring: false
      IamInstanceProfile: !Ref SysopsRoleInstanceProfile
      SecurityGroups: [ !Ref SysopsSecurityGroup ]
      UserData:
        'Fn::Base64':
          !Sub
          - |
            #!/bin/bash -xe
            exec 1>/var/log/init.log
            exec 2>/var/log/init.log

            # Setting the correct environmental variables for the script
            export PATH=/usr/local/bin:$PATH
            export ANSIBLE_INVENTORY=/etc/ansible/ec2.py
            export AWS_DEFAULT_REGION=${AWS::Region}
            export PYTHONUNBUFFERED=1

            # Updating and installing necessary packages
            mkdir -p /var/lib/rpm-state
            yum update -y
            yum install -y python-boto python-pip
            yum groupinstall -y "Development Tools"

            # Update awscli
            pip install -U awscli

            # Update boto for the Canada region
            pip install -U boto

            # Associate elastic IP
            if [ "${SysopsIpAllocationId}" != "" ]; then
              aws ec2 associate-address --region ${AWS::Region} --allow-reassociation --instance-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id) --allocation-id ${SysopsIpAllocationId}
              sleep 10
            fi

            # Setting Hostname
            hostname sysops.internal.monkapps.com;
            sed -i 's/HOSTNAME=localhost.localdomain/HOSTNAME=sysops.${Domainname}/g' /etc/sysconfig/network;

            # Set project code and domain name in window title
            echo -e "echo -ne \"\\033]0;[${Project} ${Environment}] \${!USER}@sysops:\${!PWD/#\$HOME/~} ${Domainname}\\007\"" >> /etc/sysconfig/bash-prompt-xterm
            chmod +x /etc/sysconfig/bash-prompt-xterm

            # Setting SSH Settings
            echo -e "Host 172.31.*\n    User ec2-user" > /root/.ssh/config

            # Install Ansible
            pip install ansible

            # Configure Ansible
            mkdir /etc/ansible
            curl -sf http://repository.aws.monkapps.com/ansible/ansible.cfg -o /etc/ansible/ansible.cfg

            # Download the ec2 inventory plugin.
            curl -sf http://repository.aws.monkapps.com/ansible/ec2.py -o /etc/ansible/ec2.py
            curl -sf http://repository.aws.monkapps.com/ansible/ec2.ini -o /etc/ansible/ec2.ini
            chmod 744 /etc/ansible/ec2.py
            sed -i 's/regions = all/regions = ${AWS::Region}/g' /etc/ansible/ec2.ini
            sed -i 's/^regions_exclude/#regions_exclude/g' /etc/ansible/ec2.ini
            sed -i '/^stack_filters/ a instance_filters = tag:aws:cloudformation:stack-name=${AWS::StackName}' /etc/ansible/ec2.ini

            echo -e "export ANSIBLE_INVENTORY=/etc/ansible/ec2.py" >> /root/.bashrc
            echo -e "export AWS_DEFAULT_REGION=${AWS::Region}" >> /root/.bashrc

            # Remove the ansible-inventory created by ansible 2.4
            rm -f /usr/bin/ansible-inventory

            # Clone playbooks
            git clone -b 29-06-2015 https://'${AssemblaUsername}':'${AssemblaPassword}'@git.assembla.com/${AnsibleRepo}.git /var/sysops/playbooks
            cat <<EOF >> /var/sysops/playbooks/group_vars/all
            aws_region: ${AWS::Region}
            aws_ses_region: ${SesRegion}
            release_bucket: mm-hosting-${AWS::Region}-${AWS::AccountId}
            host: ${Domainname}
            node_env: ${Environment} # Deprecated
            market: ${Market}
            stack: ${AWS::StackName}
            assembla: ${AssemblaRepo}
            assemblahosting: ${AssemblaHostingRepo}
            assemblausername: ${AssemblaUsername}
            assemblapassword: "${AssemblaPassword}"
            WebserverPurpose: "${WebserverPurpose}"
            php_version: "${PhpVersion}"
            node_version: "${NodeVersion}"
            python_version: "${PythonVersion}"
            assets: ${S3Bucket} # Deprecated, use StackResources.S3.Bucket instead

            Environment: ${Environment}
            EnvironmentUrlAbbr: ${EnvironmentUrlAbbr}
            Project: ${Project}
            SetupInMMAccount: ${SetupInMMAccount}
            StackResources:
              Sysops:
                Host: ${Sysops}
              CloudFront:
                Host: ${CloudFront}
                DistributionId: ${CloudFrontId}
              LoadBalancer:
                Host: ${LoadBalancer}
              S3:
                Bucket: ${S3Bucket}
              Database:
                Host: ${DatabaseHostname}
                Engine: ${Engine}
              Redis:
                Host: ${RedisHost}
                Endpoint: ${RedisEndpoint}
                EncryptedInTransit: ${IsRedisEncryptionInTransit}
              SES:
                Host:
              AlertsSNStopic:
                Arn: ${AlertsSNStopic}
              NatGateway:
                - ${NatGateway1ElasticIp}
                - ${NatGateway2ElasticIp}
              Route53:
                InternalHostedZone: ${InternalHostedZoneId}
                ExternalHostedZone: ${ExternalHostedZoneId}
              Lambda:
                Usage: ${LambdaUsage}
            EOF

            # Copperegg Monitoring
            if [ ${Environment} == "production" ]; then
              curl -sk http://IWZBwWWHoBvgxtud@api.copperegg.com/rc.sh | RC_LABEL="sysops ${AWS::StackName} ${Market}" RC_TAG=${AWS::StackName},${AWS::StackName}_${Market},${AWS::StackName}_${Market}_sysops,sysops sh
              echo -e "#!/bin/bash\n/usr/local/revealcloud/revealcloud -k IWZBwWWHoBvgxtud -R -m -a api.copperegg.com\n/sbin/poweroff" > /usr/local/revealcloud/shutdown.sh;
              chmod +x /usr/local/revealcloud/shutdown.sh
              sudo sysctl -w kernel.poweroff_cmd=/usr/local/revealcloud/shutdown.sh
            fi

            if [ $(cat /etc/system-release | grep -c "Amazon Linux AMI") == "1" ]; then
              echo -e "# Make up-down do incremental history search" >> /etc/inputrc
              echo -e "\"\\e[A\": history-search-backward" >> /etc/inputrc
              echo -e "\"\\e[B\": history-search-forward" >> /etc/inputrc
            fi

            # Provision self and run sysops custom
            ansible-playbook /var/sysops/playbooks/sysops.yml
            if [ -e /var/project/hosting/playbooks/sysops-custom.yml ]; then ansible-playbook /var/project/hosting/playbooks/sysops-custom.yml; fi
            uptime
            history -w
            history -c
          - SetupInMMAccount:     !If [SetupInMMAccount,     True, False]
            CloudFront:           !If [SetupCloudFront,      !GetAtt CloudFront.DomainName, '']
            CloudFrontId:         !If [SetupCloudFront,      !Ref CloudFront, '']
            Sysops:               !If
                                    - SetupDns
                                    - !Sub
                                      - '${Project}-${Env}.sysops.${AWS::Region}.${Account}.monkapps.com'
                                      - Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ]
                                        Account: !If [ SetupInMMAccount, !If [ SetupInDevAccount, dev, aws], !Ref 'AWS::AccountId' ]
                                    - !Ref SysopsElasticIp
            LoadBalancer:         !If [SetupWebServers,      !If [SetupLoadBalancerDns, !Ref LoadBalancerDns, !GetAtt ApplicationLoadBalancer.DNSName], '']
            S3Bucket:             !If [SetupS3Bucket,        !Ref S3Bucket, '']
            S3Key:                !If [SetupS3Bucket,        !Ref S3UserAccessKey, '']
            S3Secret:             !If [SetupS3Bucket,        !GetAtt S3UserAccessKey.SecretAccessKey, '']
            DatabaseHostname:     !If [SetupDatabaseDns,     !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, hostname], !If [SetupDatabase, !GetAtt Database.Endpoint.Address, !Ref DatabaseHostname]]
            RedisHost:            !If
                                    - SetupRedisEncryptionInTransit
                                    - redis-ssl # defined in /etc/hosts of web servers
                                    - !If
                                      - SetupRedisDns
                                      - redis # defined as internal.monkapps.com record
                                      - !If [SetupRedis, !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address, '']
            RedisEndpoint:        !If [SetupRedis, !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address, '']
            IsRedisEncryptionInTransit: !If [SetupRedisEncryptionInTransit, 'yes', 'no']
            EnvironmentUrlAbbr:   !FindInMap [Environments,  !Ref Environment, UrlAbbr]
            NatGateway1ElasticIp: !If [SetupPrivateNetworks, !Ref NatGateway1ElasticIp, '']
            NatGateway2ElasticIp: !If [SetupSecondaryNatGateway, !Ref NatGateway2ElasticIp, '']
            SysopsIpAllocationId: !If [SetupElasticIp,       !GetAtt SysopsElasticIp.AllocationId, '']
            InternalHostedZoneId: !If [SetupDns,             !Ref InternalHostedZone, '']
            ExternalHostedZoneId: !If [SetupDns,             !ImportValue MMHostingZoneId, '']
            Engine:               !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, engine]
            PhpVersion:           !Join [ '', !Split ['.', !Ref PhpVersion] ]
            PythonVersion:        !Join [ '', !Split ['.', !Ref PythonVersion] ]
            SesRegion:            !FindInMap [SesRegions, !Ref 'AWS::Region', region]
  SysopsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: SetupSysops
    Properties:
      AvailabilityZones:
        - !Ref Subnet1AZ
        - !Ref Subnet2AZ
      Cooldown: 300
      DesiredCapacity: 1
      MaxSize: 1
      MinSize: 1
      HealthCheckGracePeriod: 900
      HealthCheckType: EC2
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      LaunchConfigurationName: !Ref SysopsLaunchConfiguration
      Tags:
      - Key: Project
        Value: !Ref Project
        PropagateAtLaunch: true
      - Key: Name
        Value: !Sub '${AWS::StackName}_sysops'
        PropagateAtLaunch: true
      - Key: Environment
        Value: !Ref Environment
        PropagateAtLaunch: true
      - Key: Role
        Value: !Sub '${AWS::StackName}_Ansible'
        PropagateAtLaunch: true
      - Key: Market
        Value: !Ref Market
        PropagateAtLaunch: true
      NotificationConfiguration:
        TopicARN: !Ref AlertsSNStopic
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
  SysopsElasticIp:
    Type: AWS::EC2::EIP
    Condition: SetupElasticIp
    DependsOn: Vpc
    Properties:
      Domain: vpc
  SysopsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: SetupSysops
    Properties:
      GroupName: !Sub '${AWS::StackName}-sysops'
      GroupDescription: SysopsSecurityGroup
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 18.194.0.193/32
          Description: MM Bastion
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 77.95.98.128/25
              Description: Hilversum Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 77.95.98.128/25
          Description: Hilversum Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 185.16.20.0/22
              Description: Hilversum Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 185.16.20.0/22
          Description: Hilversum Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 192.95.80.0/20
              Description: Hilversum Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 192.95.80.0/20
          Description: Hilversum Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 109.231.205.214/32
              Description: London Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 109.231.205.214/32
          Description: London Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 206.252.201.210/32
              Description: New York Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 206.252.201.210/32
          Description: New York Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 96.251.72.217/32
              Description: Los Angeles Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 96.251.72.217/32
          Description: Los Angeles Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 98.152.23.134/32
              Description: Los Angeles Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 98.152.23.134/32
          Description: Los Angeles Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 202.55.75.22/32
              Description: Singapore Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 202.55.75.22/32
          Description: Singapore Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 201.216.212.53/32
              Description: Buenos Aires Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 201.216.212.53/32
          Description: Buenos Aires Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 181.45.49.202/32
              Description: Buenos Aires Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 181.45.49.202/32
          Description: Buenos Aires Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 190.210.141.32/32
              Description: Buenos Aires Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 190.210.141.32/32
          Description: Buenos Aires Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 190.216.94.88/29
              Description: Buenos Aires Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 190.216.94.88/29
          Description: Buenos Aires Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 177.8.170.226/32
              Description: Sao Paulo Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 177.8.170.226/32
          Description: Sao Paulo Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 151.236.200.4/32
              Description: Stockholm Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 151.236.200.4/32
          Description: Stockholm Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 180.168.92.138/32
              Description: Shanghai Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 180.168.92.138/32
          Description: Shanghai Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 187.188.11.24/32
              Description: Mexico Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 187.188.11.24/32
          Description: Mexico Office
        - !If
            - SetupInMMAccount
            - !Ref 'AWS::NoValue'
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 187.162.213.169/32
              Description: Mexico Office
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 187.162.213.169/32
          Description: Mexico Office
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - { Key: Name, Value: Sysops }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  SysopsRole:
    Type: AWS::IAM::Role
    Condition: SetupSysops
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub 'ec2.${AWS::URLSuffix}'
            Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: Sysops-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:CreateTags
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
                  - cloudwatch:PutMetricData
                Resource: '*'
              # Publish messages to the Alert Topic
              - Effect: Allow
                Action: sns:Publish
                Resource: !Ref AlertsSNStopic
              # Allow access to the mm-hosting-bucket/stackname
              - Effect: Allow
                Action: s3:*
                Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-${AWS::Region}-${AWS::AccountId}/${AWS::StackName}/*'
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-${AWS::Region}-${AWS::AccountId}'
                Condition:
                  StringLike:
                    s3:prefix: !Sub '${AWS::StackName}/*'
              # Allow access to mm-hosting-logs-bucket/stackname/*
              - Effect: Allow
                Action: s3:*
                Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-logs-${AWS::Region}-${AWS::AccountId}/${AWS::StackName}/*'
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-logs-${AWS::Region}-${AWS::AccountId}'
                Condition:
                  StringLike:
                    s3:prefix: !Sub '${AWS::StackName}/*'
              # Allow access to mm-hosting-archive-bucket/stackname/*
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-archive-${AWS::Region}-${AWS::AccountId}/${AWS::StackName}/*'
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-archive-${AWS::Region}-${AWS::AccountId}'
                Condition:
                  StringLike:
                    s3:prefix: !Sub '${AWS::StackName}/*'
              # Allow Description of Target Groups and (De)Registering of the instances
              - Effect: Allow
                Action:
                  - 'elasticloadbalancing:DescribeTargetGroups'
                  - 'elasticloadbalancing:DescribeTargetHealth'
                  - 'elasticloadbalancing:DeregisterTargets'
                  - 'elasticloadbalancing:RegisterTargets'
                  - 'autoscaling:DescribeAutoScalingInstances'
                  - 'autoscaling:DescribeAutoScalingGroups'
                Resource: '*'
              # Allow DNS changes
              - !If
                - SetupDns
                - Effect: Allow
                  Action:
                    - 'route53:ChangeResourceRecordSets'
                    - 'route53:ListResourceRecordSets'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:route53:::hostedzone/${InternalHostedZone}'
                    - !Sub
                      - 'arn:${AWS::Partition}:route53:::hostedzone/${ZoneId}'
                      - ZoneId: !ImportValue MMHostingZoneId
                - !Ref 'AWS::NoValue'
              - !If
                - SetupDns
                - Effect: Allow
                  Action: 'route53:ListHostedZones'
                  Resource: '*'
                - !Ref 'AWS::NoValue'
              # Allow read access to CloudWatch logs
              - Effect: Allow
                Action: 'logs:DescribeLogGroups'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group::log-stream:'
              - Effect: Allow
                Action: 'logs:FilterLogEvents'
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/mm/${AWS::StackName}/*'
              # Allow read access to RDS master password
              - Effect: Allow
                Action: 'ssm:GetParameter'
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mm/${Project}/*'
              # Allow read and write access to stack parameters
              - Effect: Allow
                Action:
                  - 'ssm:DescribeParameters'
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:PutParameter'
                  - 'ssm:GetParametersByPath'
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mm/${AWS::StackName}/*'
              # Allow read SES identities and stats
              - Effect: Allow
                Action:
                  - 'ses:ListIdentities'
                  - 'ses:GetAccountSendingEnabled'
                  - 'ses:GetSendQuota'
                  - 'ses:GetSendStatistics'
                Resource: '*'
  ServerlessPolicy:
    Type: AWS::IAM::Policy
    Condition: SetupLambda
    Properties:
      PolicyName: Serverless-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - "apigateway:*"
              - "cloudformation:CancelUpdateStack"
              - "cloudformation:ContinueUpdateRollback"
              - "cloudformation:CreateChangeSet"
              - "cloudformation:CreateStack"
              - "cloudformation:CreateUploadBucket"
              - "cloudformation:DeleteStack"
              - "cloudformation:Describe*"
              - "cloudformation:EstimateTemplateCost"
              - "cloudformation:ExecuteChangeSet"
              - "cloudformation:Get*"
              - "cloudformation:List*"
              - "cloudformation:PreviewStackUpdate"
              - "cloudformation:UpdateStack"
              - "cloudformation:UpdateTerminationProtection"
              - "cloudformation:ValidateTemplate"
              - "dynamodb:CreateTable"
              - "dynamodb:DeleteTable"
              - "dynamodb:DescribeTable"
              - "ec2:AttachInternetGateway"
              - "ec2:AuthorizeSecurityGroupIngress"
              - "ec2:CreateInternetGateway"
              - "ec2:CreateNetworkAcl"
              - "ec2:CreateNetworkAclEntry"
              - "ec2:CreateRouteTable"
              - "ec2:CreateSecurityGroup"
              - "ec2:CreateSubnet"
              - "ec2:CreateTags"
              - "ec2:CreateVpc"
              - "ec2:DeleteInternetGateway"
              - "ec2:DeleteNetworkAcl"
              - "ec2:DeleteNetworkAclEntry"
              - "ec2:DeleteRouteTable"
              - "ec2:DeleteSecurityGroup"
              - "ec2:DeleteSubnet"
              - "ec2:DeleteVpc"
              - "ec2:Describe*"
              - "ec2:DetachInternetGateway"
              - "ec2:ModifyVpcAttribute"
              - "events:DeleteRule"
              - "events:DescribeRule"
              - "events:ListRuleNamesByTarget"
              - "events:ListRules"
              - "events:ListTargetsByRule"
              - "events:PutRule"
              - "events:PutTargets"
              - "events:RemoveTargets"
              - "iam:AttachRolePolicy"
              - "iam:DetachRolePolicy"
              - "iam:CreateRole"
              - "iam:DeleteRole"
              - "iam:DeleteRolePolicy"
              - "iam:GetRole"
              - "iam:PassRole"
              - "iam:PutRolePolicy"
              - "iot:CreateTopicRule"
              - "iot:DeleteTopicRule"
              - "iot:DisableTopicRule"
              - "iot:EnableTopicRule"
              - "iot:ReplaceTopicRule"
              - "kinesis:CreateStream"
              - "kinesis:DeleteStream"
              - "kinesis:DescribeStream"
              - "lambda:*"
              - "logs:CreateLogGroup"
              - "logs:DeleteLogGroup"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:FilterLogEvents"
              - "logs:GetLogEvents"
              - "logs:PutSubscriptionFilter"
              - "s3:CreateBucket"
              - "s3:DeleteBucket"
              - "s3:DeleteBucketPolicy"
              - "s3:DeleteObject"
              - "s3:DeleteObjectVersion"
              - "s3:GetObject"
              - "s3:GetObjectVersion"
              - "s3:ListAllMyBuckets"
              - "s3:ListBucket"
              - "s3:PutBucketNotification"
              - "s3:PutBucketPolicy"
              - "s3:PutBucketTagging"
              - "s3:PutBucketWebsite"
              - "s3:PutEncryptionConfiguration"
              - "s3:PutObject"
              - "sns:CreateTopic"
              - "sns:DeleteTopic"
              - "sns:GetSubscriptionAttributes"
              - "sns:GetTopicAttributes"
              - "sns:ListSubscriptions"
              - "sns:ListSubscriptionsByTopic"
              - "sns:ListTopics"
              - "sns:SetSubscriptionAttributes"
              - "sns:SetTopicAttributes"
              - "sns:Subscribe"
              - "sns:Unsubscribe"
              - "states:CreateStateMachine"
              - "states:DeleteStateMachine"
            Resource: '*'
      Roles:
        - !Ref SysopsRole
  SysopsRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: SetupSysops
    Properties:
      Path: /
      Roles: [ !Ref SysopsRole ]
  # CloudFront
  CloudFront:
    Type: AWS::CloudFront::Distribution
    Condition: SetupCloudFront
    Properties:
      DistributionConfig:
        Origins:
        - !If
          - SetupWebServers
          - DomainName: !If [SetupLoadBalancerDns, !Ref LoadBalancerDns, !GetAtt ApplicationLoadBalancer.DNSName]
            Id: LoadBalancer
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: !If [SetupLoadBalancerDns, https-only, http-only]
              OriginSSLProtocols: [TLSv1.2]
          - !Ref 'AWS::NoValue'
        - !If
          - SetupS3Bucket
          - !If
            - SetupS3Only
            - DomainName: !Select [1, !Split ["http://", !GetAtt S3Bucket.WebsiteURL ]]
              Id: S3
              CustomOriginConfig:
                HTTPPort: 80
                OriginProtocolPolicy: http-only
            - DomainName: !GetAtt S3Bucket.DomainName
              Id: S3
              S3OriginConfig:
                OriginAccessIdentity: !If
                  - SetupCloudFrontOriginAccessIdentity
                  - !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
                  - !Ref 'AWS::NoValue'
          - !Ref 'AWS::NoValue'
        Comment: !Ref Project
        DefaultRootObject: !If [SetupWebServers, !Ref 'AWS::NoValue', index.html]
        Enabled: true
        HttpVersion: http2
        Aliases: !If
          - SetupCloudFrontCNames
          - !If
            - EnvProd
            - - !Sub 'www.${Domainname}'
              - !Ref Domainname
            - - !Sub [ 'www-${Env}.${Domainname}', { Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ] } ]
          - !Ref 'AWS::NoValue'
        PriceClass:
          !FindInMap
            - CloudFrontPriceClass
            - !Ref CloudFrontPriceClass
            - PriceClassId
        DefaultCacheBehavior:
          !If
          - SetupWebServers
          - TargetOriginId: LoadBalancer
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
            ForwardedValues:
              QueryString: true
              Headers:
                - Authorization
                - Host
                - CloudFront-Forwarded-Proto
          - !If
            - SetupS3Bucket
            - AllowedMethods:
                - HEAD
                - GET
                - OPTIONS
              TargetOriginId: S3
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
              ForwardedValues:
                QueryString: true
            - !Ref 'AWS::NoValue'
        CacheBehaviors:
          !If
          - SetupWebServers
          - - !If
              - SetupS3Bucket
              - PathPattern: /data/*
                AllowedMethods:
                  - HEAD
                  - GET
                  - OPTIONS
                TargetOriginId: S3
                ViewerProtocolPolicy: redirect-to-https
                Compress: true
                ForwardedValues:
                  QueryString: true
              - !Ref 'AWS::NoValue'
            - !If
              - SetupS3Bucket
              - PathPattern: /version/*
                AllowedMethods:
                  - HEAD
                  - GET
                  - OPTIONS
                TargetOriginId: S3
                ViewerProtocolPolicy: redirect-to-https
                Compress: true
                ForwardedValues:
                  QueryString: false
              - PathPattern: /version/*
                AllowedMethods:
                  - HEAD
                  - GET
                  - OPTIONS
                TargetOriginId: LoadBalancer
                ViewerProtocolPolicy: redirect-to-https
                Compress: true
                ForwardedValues:
                  QueryString: true
                  Headers:
                  - Authorization
                  - Host
                  - CloudFront-Forwarded-Proto
            - PathPattern: /api/*
              AllowedMethods:
                - HEAD
                - DELETE
                - POST
                - GET
                - OPTIONS
                - PUT
                - PATCH
              TargetOriginId: LoadBalancer
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
              ForwardedValues:
                QueryString: true
                Headers:
                - Authorization
                - Host
                - CloudFront-Forwarded-Proto
            - PathPattern: !Sub '/${BackendAdminPath}/*'
              AllowedMethods:
                - HEAD
                - DELETE
                - POST
                - GET
                - OPTIONS
                - PUT
                - PATCH
              TargetOriginId: LoadBalancer
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
              ForwardedValues:
                QueryString: true
                Headers:
                  - Authorization
                  - Host
                  - CloudFront-Forwarded-Proto
                Cookies:
                  Forward: all
          - !Ref 'AWS::NoValue'
        ViewerCertificate: !If
          - SetupCloudFrontCNames
          - AcmCertificateArn: !If
              - SetupCloudFrontCustomCertificate
              - !Ref CustomCertificateArn
              - !Ref CloudFrontCertificate
            MinimumProtocolVersion: TLSv1.2_2018
            SslSupportMethod: sni-only
          - !Ref 'AWS::NoValue'
  CloudFrontOriginAccessIdentity:
    Type: Custom::CloudFrontOriginAccessIdentity
    Condition: SetupCloudFrontOriginAccessIdentity
    Properties:
      ServiceToken:  !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-cloudfront-origin-access-identity'
    # Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    # Condition: SetupCloudFront
    # Properties:
    #   CloudFrontOriginAccessIdentityConfig:
    #     Comment: string-value
  CloudFrontCertificate:
    Type: Custom::AcmCertificate
    Condition: SetupCertificate
    Properties:
      ServiceToken:  !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-acm-certificate'
      DomainName: !If
        - EnvProd
        - !Sub 'www.${Domainname}'
        - !Sub [ 'www-${Env}.${Domainname}', { Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ] } ]
      AlternativeDomainNames: !If
        - SetupCloudFrontApexDns
        - !Sub '${Domainname}'
        - !Ref 'AWS::NoValue'
      Region: us-east-1
      HostedZoneId: !Ref HostedZoneId
      Validate: !If
        - SetupCertificateValidation
        - true
        - false
  CloudFrontDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupCloudFrontDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !If
        - EnvProd
        - !Sub 'www.${Domainname}'
        - !Sub [ 'www-${Env}.${Domainname}', { Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ] } ]
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
  CloudFrontApexDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupCloudFrontApexDns
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref Domainname
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: SetupWebServers
    DependsOn: InternetGatewayAttachment
    Properties:
      Scheme: internet-facing
      Name: !Ref 'AWS::StackName'
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: !If [EnvProd, true, false]
        - Key: access_logs.s3.bucket
          Value: !Sub 'mm-hosting-logs-${AWS::Region}-${AWS::AccountId}'
        - Key: access_logs.s3.prefix
          Value: !Ref 'AWS::StackName'
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups: [ !Ref LoadBalancerSecurityGroup ]
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  ApplicationLoadBalancerHttpsListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SetupLoadBalancerDns
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationLoadBalancerHttpsTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref LoadBalancerCertificate
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06
  ApplicationLoadBalancerHttpsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: SetupWebServers
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 4
      HealthCheckPath: /health.html
      Name: !Sub '${AWS::StackName}-HTTPS'
      Port: 443
      Protocol: HTTPS
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Protocol, Value: 'HTTPS' }
  ApplicationLoadBalancerHttpListener:
    Type : AWS::ElasticLoadBalancingV2::Listener
    Condition: SetupLoadBalancerHttpListener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationLoadBalancerHttpTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ApplicationLoadBalancerHttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: SetupLoadBalancerHttpListener
    Properties:
      HealthCheckIntervalSeconds: 30
      UnhealthyThresholdCount: 4
      HealthCheckPath: /health.html
      Name: !Sub '${AWS::StackName}-HTTP'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: Protocol, Value: 'HTTP' }
  LoadBalancerCertificate:
    Type: Custom::AcmCertificate
    Condition: SetupLoadBalancerDns
    Properties:
      ServiceToken:  !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-acm-certificate'
      DomainName: !Sub
        - '*.elb.${AWS::Region}.${Account}.monkapps.com'
        - Account: !If [ SetupInMMAccount, !If [ SetupInDevAccount, dev, aws], !Ref 'AWS::AccountId' ]
      Region: !Ref 'AWS::Region'
      HostedZoneId: !ImportValue MMHostingZoneId
  LoadBalancerDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupLoadBalancerDns
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !ImportValue MMHostingZoneId
      Comment: Elb DNS Name
      Name: !Sub
        - '${Project}-${Env}.elb.${AWS::Region}.${Account}.monkapps.com.'
        - Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ]
          Account: !If [ SetupInMMAccount, !If [ SetupInDevAccount, dev, aws], !Ref 'AWS::AccountId' ]
      Type: A
  LoadBalancerInternalDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupLoadBalancerDns
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApplicationLoadBalancer.DNSName
        HostedZoneId: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref InternalHostedZone
      Comment: Elb DNS Name
      Name: elb.internal.monkapps.com.
      Type: A
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: SetupWebServers
    Properties:
      GroupName: !Sub '${AWS::StackName}-loadbalancer'
      GroupDescription: LoadBalancerSecurityGroup
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - !If
          - SetupLoadBalancerHttpListener
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          - !Ref 'AWS::NoValue'
        - !If
          - SetupLoadBalancerDns
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - !Ref 'AWS::NoValue'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - { Key: Name, Value: Load Balancer }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  # Web Servers
  WebserverLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Condition: SetupWebServers
    DependsOn: SysopsLaunchConfiguration # Do not create the web servers before the sysops is ready (sysops waits for CF, RDS, EC, etc)
    Properties:
      ImageId: !Ref Ec2Ami
      InstanceType: !Ref WebserverInstanceType
      KeyName: !Ref 'AWS::StackName'
      InstanceMonitoring: !If [ EnvProd, true, false ]
      IamInstanceProfile: !Ref WebserverRoleInstanceProfile
      SecurityGroups: [ !Ref WebserverSecurityGroup ]
      UserData:
        'Fn::Base64':
          !Sub
          - |
            #!/bin/bash -xe
            exec 1>/var/log/init.log
            exec 2>/var/log/init.log
            date +"[%Y-%m-%d %H:%M:%S] Starting user-data-script..."
            mkdir -p /var/lib/rpm-state
            yum -y update

            # Set project code and domain name in window title
            echo -e "echo -ne \"\\033]0;[${Project} ${Environment}] \${!USER}@www:\${!PWD/#\$HOME/~} ${Domainname}\\007\"" >> /etc/sysconfig/bash-prompt-xterm
            chmod +x /etc/sysconfig/bash-prompt-xterm

            # Copperegg Monitoring
            if [ ${Environment} == "production" ]; then
              curl -sk http://IWZBwWWHoBvgxtud@api.copperegg.com/rc.sh | RC_LABEL="www ${AWS::StackName} ${Market}" RC_TAG=${AWS::StackName},${AWS::StackName}_${Market},${AWS::StackName}_${Market}_www,www sh
              echo -e "#!/bin/bash\n/usr/local/revealcloud/revealcloud -k IWZBwWWHoBvgxtud -R -m -a api.copperegg.com\n/sbin/shutdown\n" > /usr/local/revealcloud/shutdown.sh;
              chmod +x /usr/local/revealcloud/shutdown.sh
              sudo sysctl -w kernel.poweroff_cmd=/usr/local/revealcloud/shutdown.sh
            fi

            if [ $(cat /etc/system-release | grep -c "Amazon Linux AMI") == "1" ]; then
              echo -e "# Make up-down do incremental history search" >> /etc/inputrc
              echo -e "\"\\e[A\": history-search-backward" >> /etc/inputrc
              echo -e "\"\\e[B\": history-search-forward" >> /etc/inputrc
            fi

            # Ping sysops
            status=-1;
            while [ $status -ne 0 ]; do
              date +"[%Y-%m-%d %H:%M:%S] Contacting sysops...";
              curl -sf http://${Sysops}/ > pubkey;
              status=$?;
              if [ $status -ne 0 ]; then
                sleep 15;
              fi;
            done;
            date +"[%Y-%m-%d %H:%M:%S] Success! Saving public key..."
            cat pubkey >> ~ec2-user/.ssh/authorized_keys;
            rm -f pubkey

            echo "All done."
            uptime
            history -w
            history -c
          - Sysops: !If [SetupDns, sysops.internal.monkapps.com, !Sub '`dig +short -x ${SysopsElasticIp}`']
  WebserverAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Condition: SetupWebServers
    Properties:
      AvailabilityZones:
        - !Ref Subnet1AZ
        - !Ref Subnet2AZ
      Cooldown: 300
      DesiredCapacity: !Ref WebserverMinSize
      MaxSize: !Ref WebserverMaxSize
      MinSize: !Ref WebserverMinSize
      HealthCheckGracePeriod: 900
      HealthCheckType: ELB
      VPCZoneIdentifier:
        - !If [ SetupPrivateNetworks, !Ref PrivateSubnet1, !Ref Subnet1 ]
        - !If [ SetupPrivateNetworks, !Ref PrivateSubnet2, !Ref Subnet2 ]
      LaunchConfigurationName: !Ref WebserverLaunchConfiguration
      TargetGroupARNs:
        - !If [SetupLoadBalancerHttpListener, !Ref ApplicationLoadBalancerHttpTargetGroup, !Ref 'AWS::NoValue']
        - !Ref ApplicationLoadBalancerHttpsTargetGroup
      Tags:
        - Key: Project
          Value: !Ref Project
          PropagateAtLaunch: true
        - Key: Name
          Value: !Sub '${AWS::StackName}_www'
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
        - Key: role
          Value: !Sub '${AWS::StackName}_release'
          PropagateAtLaunch: true
        - Key: purpose
          Value: !Sub '${AWS::StackName}_${WebserverPurpose}'
          PropagateAtLaunch: true
        - Key: Market
          Value: !Ref Market
          PropagateAtLaunch: true
      NotificationConfiguration:
        TopicARN: !Ref AlertsSNStopic
        NotificationTypes:
          - autoscaling:EC2_INSTANCE_LAUNCH
          - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
          - autoscaling:EC2_INSTANCE_TERMINATE
          - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupDesiredCapacity
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTotalInstances
  WebserverScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: SetupWebServers
    Properties:
      AdjustmentType: ChangeInCapacity
      Cooldown: 300
      ScalingAdjustment: -1
      AutoScalingGroupName: !Ref WebserverAutoScalingGroup
  WebserverScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: SetupWebServers
    Properties:
      AdjustmentType: ChangeInCapacity
      Cooldown: 60
      ScalingAdjustment: 1
      AutoScalingGroupName: !Ref WebserverAutoScalingGroup
  WebserverScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupWebServers
    Properties:
      ActionsEnabled: true
      AlarmDescription: Scale down at < 20% load
      ComparisonOperator: LessThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 600
      Statistic: Average
      Threshold: 20.0
      Unit: Percent
      AlarmActions: [ !Ref WebserverScaleDownPolicy ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebserverAutoScalingGroup
  WebserverScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupWebServers
    Properties:
      ActionsEnabled: true
      AlarmDescription: Scale up at > 65% load
      ComparisonOperator: GreaterThanThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 65.0
      Unit: Percent
      AlarmActions: [ !Ref WebserverScaleUpPolicy ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebserverAutoScalingGroup
  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: SetupWebServers
    Properties:
      GroupName: !Sub '${AWS::StackName}-webservers'
      GroupDescription: WebserverSecurityGroup
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref SysopsSecurityGroup
          Description: Sysops
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SysopsSecurityGroup
          Description: Sysops
        - !If
          - SetupLoadBalancerHttpListener
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
            Description: Load Balancer
          - !Ref 'AWS::NoValue'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          Description: Load Balancer
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - { Key: Name, Value: Web }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  WebserverRole:
    Type: AWS::IAM::Role
    Condition: SetupWebServers
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: !Sub 'ec2.${AWS::URLSuffix}'
          Action: [ 'sts:AssumeRole' ]
      Path: /
      Policies:
        - PolicyName: Webserver-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            # Publish messages to the Alert Topic
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref AlertsSNStopic
            # Get mmhosting-bucket/project/full/release.zip
            - Effect: Allow
              Action: s3:getObject
              Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-${AWS::Region}-${AWS::AccountId}/${AWS::StackName}/full/release.zip'
            # Allow list and write access to mm-hosting-logs-bucket/stackname/*
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-logs-${AWS::Region}-${AWS::AccountId}/${AWS::StackName}/*'
            - Effect: Allow
              Action: s3:ListBucket
              Resource: !Sub 'arn:${AWS::Partition}:s3:::mm-hosting-logs-${AWS::Region}-${AWS::AccountId}'
              Condition:
                StringLike:
                  s3:prefix: !Sub '${AWS::StackName}/*'
            # Allow read access to stack parameters
            - Effect: Allow
              Action:
                - 'ssm:DescribeParameters'
                - 'ssm:GetParameter'
                - 'ssm:GetParameters'
                - 'ssm:GetParametersByPath'
              Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/mm/${AWS::StackName}/*'
  WebserverRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: SetupWebServers
    Properties:
      Path: /
      Roles: [ !Ref WebserverRole ]
  # Database
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: SetupDatabase
    Properties:
      DBSubnetGroupDescription: default
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
    DependsOn:
      - Subnet1
      - Subnet2
      - InternetGatewayAttachment
  DatabaseMasterUsername:
    Type: Custom::DatabaseMasterUsernameSsmParameter
    Condition: SetupDatabase
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !If
        - SetupDatabaseMasterCredentials
        - !Sub "/mm/${Project}/db-master-user"
        - !Sub "/mm/${AWS::StackName}/db-master-user"
      Description: Database Master Username
      ParameterType: value
      Value: MMDBMaster
  DatabaseMasterPassword:
    Type: Custom::DatabaseMasterPasswordSsmParameter
    Condition: SetupDatabase
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !If
        - SetupDatabaseMasterCredentials
        - !Sub "/mm/${Project}/db-master-pass"
        - !Sub "/mm/${AWS::StackName}/db-master-pass"
      Description: Database Master Password
      ParameterType: random:32
  DatabaseName:
    Type: Custom::DatabaseNameSsmParameter
    Condition: SetupDatabaseCredentials
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/db-name"
      Description: Database Name
      ParameterType: mm:db-name
      Stack: !Sub "${AWS::StackName}"
      Project: !Ref Project
      Environment: !FindInMap [Environments, !Ref Environment, UrlAbbr]
  DatabaseUsername:
    Type: Custom::DatabaseUsernameSsmParameter
    Condition: SetupDatabaseCredentials
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/db-user"
      Description: Database Username
      ParameterType: mm:db-user
      Stack: !Sub "${AWS::StackName}"
      Project: !Ref Project
      Environment: !FindInMap [Environments, !Ref Environment, UrlAbbr]
  DatabasePassword:
    Type: Custom::DatabasePasswordSsmParameter
    Condition: SetupDatabaseCredentials
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/db-pass"
      Description: Database Password
      ParameterType: random:32
  Database:
    Type: AWS::RDS::DBInstance
    Condition: SetupDatabase
    Properties:
      CopyTagsToSnapshot: True
      DBInstanceClass: !Ref DatabaseInstanceType
      Port: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
      AllocatedStorage: !Ref DatabaseAllocatedStorage
      BackupRetentionPeriod: !If [EnvProd, 7, 2]
      StorageEncrypted: !Ref DatabaseEncryption
      Engine: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, engine]
      EngineVersion: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, version]
      MasterUsername: !Ref DatabaseMasterUsername
      MasterUserPassword: !Ref DatabaseMasterPassword
      PreferredBackupWindow: !FindInMap [Regions, !Ref 'AWS::Region', BackupWindow]
      PreferredMaintenanceWindow: !FindInMap [Regions, !Ref 'AWS::Region', MaintenanceWindow]
      MultiAZ: !Ref DatabaseMultiAZ
      PubliclyAccessible: true
      VPCSecurityGroups: [!Ref DatabaseSecurityGroup]
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !If [ SetupDatabaseMysqlParameterGroup, !Ref DatabaseMysqlParameterGroup, !Ref 'AWS::NoValue' ]
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Market, Value: !Ref Market }
        - { Key: Environment, Value: !Ref Environment }
    DependsOn: DatabaseSubnetGroup
    DeletionPolicy: Snapshot
  DatabaseMysqlParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Condition: SetupDatabaseMysqlParameterGroup
    Properties:
      Description: development-base
      Family: mysql5.7
      Parameters:
        max_allowed_packet: 104857600
        log_bin_trust_function_creators: 1
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: SetupDatabase
    Properties:
      GroupName: !Sub '${AWS::StackName}-database'
      GroupDescription: database group
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - !If
          - SetupSysops
          - IpProtocol: tcp
            FromPort: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
            ToPort: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
            SourceSecurityGroupId: !Ref SysopsSecurityGroup
            Description: Sysops
          - !Ref 'AWS::NoValue'
        - !If
          - SetupWebServers
          - IpProtocol: tcp
            FromPort: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
            ToPort: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
            SourceSecurityGroupId: !Ref WebserverSecurityGroup
            Description: Web Servers
          - !Ref 'AWS::NoValue'
        - !If
          - SetupLambdaInVpc
          - IpProtocol: tcp
            FromPort: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
            ToPort: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port]
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
            Description: Lambda
          - !Ref 'AWS::NoValue'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - { Key: Name, Value: Database }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
        - { Key: 'rds-whitelist:port', Value: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, port] }
  DatabaseInternalDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupDatabaseDns
    Properties:
      HostedZoneId: !Ref InternalHostedZone
      Comment: !Sub '${DatabaseEngineType} DNS Name'
      Name: !Sub
              - ${hostname}.internal.monkapps.com.
              - hostname: !FindInMap [DatabaseEngines, !Ref DatabaseEngineType, hostname]
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !If [ SetupDatabase, !GetAtt Database.Endpoint.Address, !Ref DatabaseHostname ]
  DatabaseDiskFullAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupDatabase
    Properties:
      ActionsEnabled: true
      AlarmActions: [ !Ref AlertsSNStopic ]
      AlarmDescription: Less than 1GB of free disk space on database
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref Database
      EvaluationPeriods: 2
      MetricName: FreeStorageSpace
      Namespace: AWS/RDS
      OKActions: [ !Ref AlertsSNStopic ]
      Period: 300
      Statistic: Average
      Threshold: 1073741824
      Unit: Bytes
  DatabaseCpuCreditsDepletedAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupDatabase
    Properties:
      ActionsEnabled: true
      AlarmActions: [ !Ref AlertsSNStopic ]
      AlarmDescription: Less than 30 CPU credits remaining
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBInstanceIdentifier
          Value: !Ref Database
      EvaluationPeriods: 1
      MetricName: CPUCreditBalance
      Namespace: AWS/RDS
      OKActions: [ !Ref AlertsSNStopic ]
      Period: 300
      Statistic: Average
      Threshold: 30
      Unit: Count
  # Redis
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Condition: SetupRedis
    Properties:
      Description: RedisSubnetGroup
      SubnetIds:
        - !If [ SetupPrivateNetworks, !Ref PrivateSubnet1, !Ref Subnet1 ]
        - !If [ SetupPrivateNetworks, !Ref PrivateSubnet2, !Ref Subnet2 ]
  RedisAuthToken:
    Type: Custom::RedisAuthTokenSsmParameter
    Condition: SetupRedisEncryptionInTransit
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/redis-auth-token"
      Description: Redis AUTH Token
      ParameterType: random:32
  RedisReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Condition: SetupRedis
    Properties:
      AtRestEncryptionEnabled: !If [SetupRedisEncryptionAtRest, true, false]
      TransitEncryptionEnabled: !If [SetupRedisEncryptionInTransit, true, false]
      AuthToken: !If [SetupRedisEncryptionInTransit, !Ref RedisAuthToken, !Ref 'AWS::NoValue']
      ReplicationGroupDescription: !Ref 'AWS::StackName'
      AutomaticFailoverEnabled: !Ref RedisMultiAZ
      AutoMinorVersionUpgrade: true
      CacheNodeType: !Ref RedisInstanceType
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      Engine: redis
      NotificationTopicArn: !Ref AlertsSNStopic
      NumCacheClusters: !If [SetupRedisMultiAZ, 2, 1]
      PreferredCacheClusterAZs:
        - !Ref Subnet1AZ
        - !If [SetupRedisMultiAZ, !Ref Subnet2AZ, !Ref 'AWS::NoValue']
      PreferredMaintenanceWindow: !FindInMap [Regions, !Ref 'AWS::Region', MaintenanceWindow]
      SecurityGroupIds: [ !GetAtt RedisSecurityGroup.GroupId ]
      SnapshotRetentionLimit: !If [SetupRedisSnapShots, !If [EnvProd, 7, 2], !Ref 'AWS::NoValue']
      SnapshotWindow: !If [SetupRedisSnapShots, !FindInMap [Regions, !Ref 'AWS::Region', BackupWindow], !Ref 'AWS::NoValue']
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-redis'
      GroupDescription: RedisSecurityGroup
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref SysopsSecurityGroup
          Description: Sysops
        - !If
          - SetupWebServers
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: !Ref WebserverSecurityGroup
            Description: Web Servers
          - !Ref 'AWS::NoValue'
        - !If
          - SetupLambdaInVpc
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
            Description: Lambda
          - !Ref 'AWS::NoValue'
      SecurityGroupEgress: []
      Tags:
        - { Key: Name, Value: Redis }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
    Condition: SetupRedis
  RedisInternalDns:
    Type: AWS::Route53::RecordSet
    Condition: SetupRedisDns
    Properties:
      HostedZoneId: !Ref InternalHostedZone
      Comment: Redis DNS Name
      Name: redis.internal.monkapps.com.
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
  RedisMemoryFullAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: SetupRedis
    Properties:
      ActionsEnabled: true
      AlarmActions: [ !Ref AlertsSNStopic ]
      AlarmDescription: Less than 100MB of free memory on redis
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: CacheClusterId
          Value: !Sub '${RedisReplicationGroup}-001'
      EvaluationPeriods: 1
      MetricName: FreeableMemory
      Namespace: AWS/ElastiCache
      OKActions: [ !Ref AlertsSNStopic ]
      Period: 300
      Statistic: Average
      Threshold: 104857600
      Unit: Bytes
  # S3
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: SetupS3Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration: !If
        - SetupS3Only
        - IndexDocument: index.html
          ErrorDocument: index.html
        - !Ref 'AWS::NoValue'
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            NoncurrentVersionExpirationInDays: 60
            NoncurrentVersionTransitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA
      Tags:
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  S3Endpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Condition: SetupS3BucketEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: S3AllowAllBuckets
            Effect: Allow
            Action: [ 's3:*' ]
            Resource:  '*'
            Principal: '*'
      RouteTableIds:
        - !Ref RouteTable
        - !If [SetupPrivateNetworks, !Ref PrivateRouteTable1, !Ref 'AWS::NoValue']
        - !If [SetupSecondaryNatGateway, !Ref PrivateRouteTable2, !Ref 'AWS::NoValue']
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref Vpc
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: SetupS3Bucket
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        Statement:
          - Action: [ 's3:GetObject' ]
            Effect: Allow
            Principal:
              AWS: !If
                - SetupCloudFrontOriginAccessIdentity
                - !If
                  - SetupS3Only
                  - '*'
                  - !Sub 'arn:${AWS::Partition}:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
                - '*'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
            Sid: AddPerm
          - !If
              - SetupS3BucketEndpoint
              - Effect: Allow
                Action: [ 's3:*' ]
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
                Condition:
                  StringEquals :
                    aws:sourceVpce: !Ref S3Endpoint
                Principal: '*'
                Sid: AllowFromVpcEndpointSoNginxCanProxyWithoutCredentials
              - !Ref 'AWS::NoValue'
  S3Policy:
    Type: AWS::IAM::Policy
    Condition: SetupS3Bucket
    Properties:
      PolicyName: S3-Bucket-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetBucketLocation
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}'
          - Effect: Allow
            Action: s3:*
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${S3Bucket}/*'
      Roles:
        - !If [SetupSysops, !Ref SysopsRole, !Ref 'AWS::NoValue']
        - !If [SetupWebServers, !Ref WebserverRole, !Ref 'AWS::NoValue']
      Users:
        - !Ref S3User
  S3User:
    Type: AWS::IAM::User
  S3UserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref S3User

  # Serverless - Lambda
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: SetupLambdaInVpc
    Properties:
      GroupName: !Sub '${AWS::StackName}-lambda'
      GroupDescription: LambdaSecurityGroup
      VpcId: !Ref Vpc
      SecurityGroupIngress: []
      SecurityGroupEgress: []
      Tags:
        - { Key: Name, Value: Lambda }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }

  # IAM
  IamKey:
    Type: AWS::SSM::Parameter
    Properties:
      Description: IAM Key
      Name: !Sub "/mm/${AWS::StackName}/iam-key"
      Type: String
      Value: !Ref S3UserAccessKey
  IamSecret:
    Type: Custom::IamSecretSsmParameter
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Description: IAM Secret
      Name: !Sub "/mm/${AWS::StackName}/iam-secret"
      ParameterType: secret
      Secret: !GetAtt S3UserAccessKey.SecretAccessKey
  # CloudWatchLogs
  CloudWatchLogsPolicy:
    Type: AWS::IAM::Policy
    Condition: SetupSysops
    Properties:
      PolicyName: CloudWatch-Logs-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/mm/${AWS::StackName}/*'
      Roles:
        - !If [SetupSysops, !Ref SysopsRole, !Ref 'AWS::NoValue']
        - !If [SetupWebServers, !Ref WebserverRole, !Ref 'AWS::NoValue']
  # SSM
  SsmPolicy:
    Type: AWS::IAM::Policy
    Condition: SetupSysops
    Properties:
      PolicyName: SSM-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - s3:GetEncryptionConfiguration
            Resource: '*'
          - Effect: Allow
            Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Resource: '*'
          # - Effect: Allow
          #   Action:
          #     - cloudwatch:PutMetricData
          #   Resource: '*'
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
            Resource: '*'
          - Effect: Allow
            Action:
              - ds:CreateComputer
              - ds:DescribeDirectories
            Resource: '*'
          # - Effect: Allow
          #   Action:
          #     - logs:CreateLogGroup
          #     - logs:CreateLogStream
          #     - logs:DescribeLogGroups
          #     - logs:DescribeLogStreams
          #     - logs:PutLogEvents
          #   Resource: '*'
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:ListBucketMultipartUploads
            Resource: !Sub 'arn:${AWS::Partition}:s3:::amazon-ssm-packages-*'
          # Resource: '*'
          - Effect: Allow
            Action:
              - s3:ListBucket
            Resource: !Sub 'arn:${AWS::Partition}:s3:::amazon-ssm-packages-*'
      Roles:
        - !If [SetupSysops, !Ref SysopsRole, !Ref 'AWS::NoValue']
        - !If [SetupWebServers, !Ref WebserverRole, !Ref 'AWS::NoValue']
  BackendAppEncryptionKey:
    Type: Custom::BackendAppEncryptionKeySsmParameter
    Condition: SetupWebServers
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/env/app-encryption-key"
      Description: Backend App Encryption Key
      ParameterType: defuse-key
  BackendAppSecret:
    Type: Custom::BackendAppSecretSsmParameter
    Condition: SetupWebServers
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/env/app-secret"
      Description: Backend App Secret
      ParameterType: random:32
  BackendAdminPath:
    Type: Custom::BackendAdminPathSsmParameter
    Condition: SetupWebServers
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/env/admin-path"
      Description: Admin path
      ParameterType: mm:admin-path
  WebPasswordMediaMonks:
    Type: Custom::WebPasswordMediaMonksSsmParameter
    Condition: SetupWebServers
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-generate-ssm-parameter'
      Name: !Sub "/mm/${AWS::StackName}/htaccess/MediaMonks"
      Description: MediaMonks Web Password
      ParameterType: random:8

  # SES
  SesPolicy:
    Type: AWS::IAM::Policy
    Condition: SetupWebServers
    Properties:
      PolicyName: Send-Email-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
            Condition:
              ForAllValues:StringLike:
                ses:FromAddress: !Sub '*@${Domainname}'
      Roles:
        - !If [SetupSysops, !Ref SysopsRole, !Ref 'AWS::NoValue']
        - !If [SetupWebServers, !Ref WebserverRole, !Ref 'AWS::NoValue']
      Users:
        - !Ref S3User
  # SQS
  SqsPolicy:
    Type: AWS::IAM::Policy
    Condition: SetupSysops
    Properties:
      PolicyName: SQS-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sqs:*
            Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${AWS::StackName}*'
          - Effect: Allow
            Action:
              - sqs:ListQueues
            Resource: '*'
      Roles:
        - !If [SetupSysops, !Ref SysopsRole, !Ref 'AWS::NoValue']
        - !If [SetupWebServers, !Ref WebserverRole, !Ref 'AWS::NoValue']
      Users:
        - !Ref S3User
  CloudFrontPolicy:
    Type: AWS::IAM::Policy
    Condition: SetupCloudFront
    Properties:
      PolicyName: CloudFront-Policy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudfront:ListDistributions
              - cloudfront:ListInvalidations
              - cloudfront:GetInvalidation
              - cloudfront:CreateInvalidation
              - cloudfront:GetDistribution
            Resource: '*'
      Roles:
        - !If [SetupSysops, !Ref SysopsRole, !Ref 'AWS::NoValue']
      Users:
        - !Ref S3User
  # Security
  IngressWebserverHttpSysops:
    # this is still required because if we directly allow the Web servers to access
    # the sysops in the sysops security group, it creates a circular dependency.
    Type: AWS::EC2::SecurityGroupIngress
    Condition: SetupWebServers
    Properties:
      GroupId: !Ref SysopsSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref WebserverSecurityGroup
      Description: Web Servers
  HealthCheck:
    Type: AWS::Route53::HealthCheck
    Condition: SetupHealthCheck
    Properties:
      HealthCheckConfig:
        Type: !If [ SetupHealthCheckSearch, HTTPS_STR_MATCH, HTTPS]
        FullyQualifiedDomainName: !Ref HealthCheckDomain
        Port: 443
        EnableSNI: true
        ResourcePath: !Ref HealthCheckPath
        SearchString: !If [SetupHealthCheckSearch, !Ref HealthCheckSearchString, !Ref 'AWS::NoValue']
        RequestInterval: 30
        FailureThreshold: 3
      HealthCheckTags:
        - { Key: Name, Value: !Ref 'AWS::StackName' }
        - { Key: Project, Value: !Ref Project }
        - { Key: Environment, Value: !Ref Environment }
  HealthCheckAlarm:
    # This is a custom resource as CloudWatch Alarms for Route 53 Health Checks always need to be created in us-east-1
    Type: Custom::HealthCheckAlarm
    Condition: SetupHealthCheck
    Properties:
      ServiceToken: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:cfn-create-cloudwatch-alarm'
      HealthCheckId: !Ref HealthCheck
  # SNS
  AlertsSNStopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-alerts'
      DisplayName: !Sub '${AWS::StackName} Alerts'
      Subscription:
      - Endpoint:  !Sub 'group-hosting+${AWS::StackName}@mediamonks.com'
        Protocol: email
      - !If
          - SetupInChina
          - !Ref 'AWS::NoValue'
          - Endpoint: !Sub 'arn:${AWS::Partition}:sqs:eu-west-1:036481243746:hosting-notifications'
            Protocol: sqs
      - !If
        - EnvProd
        - Endpoint: https://events.pagerduty.com/integration/18584644d34c4be0830edce5b0b5bc0c/enqueue
          Protocol: https
        - !Ref AWS::NoValue
      - !If
        - SetupDatabaseWhitelisting
        - Endpoint: !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:rds-whitelist'
          Protocol: lambda
        - !Ref 'AWS::NoValue'
Outputs:
  CloudFront:
    Condition: SetupCloudFront
    Value: !GetAtt CloudFront.DomainName
  DnsRecords:
    Condition: OutputDnsRecords
    Value: !Sub
      - |
        ${DomainDns} CNAME ${DomainDnsTarget}
        ${DomainApexDns}
        ${CertificateDns}
      - DomainDns: !If
          - EnvProd
          - !Sub 'www.${Domainname}'
          - !Sub [ 'www-${Env}.${Domainname}', { Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ] } ]
        DomainDnsTarget: !If
          - SetupCloudFront
          - !GetAtt CloudFront.DomainName
          - !If
            - SetupWebServers
            - !If
              - SetupLoadBalancerDns
              - !Ref LoadBalancerDns
              - !GetAtt ApplicationLoadBalancer.DNSName
            - '?'
        DomainApexDns: !If
          - EnvProd
          - !Sub ${Domainname} A 54.154.35.170
          - ""
        CertificateDns: !If
          - SetupCertificate
          - !Sub '${CloudFrontCertificate.ValidationDnsRecords}'
          - ""
  LoadBalancer:
    Condition: SetupWebServers
    Value: !If [SetupLoadBalancerDns, !Ref LoadBalancerDns, !GetAtt ApplicationLoadBalancer.DNSName]
  Sysops:
    Condition: SetupSysops
    Value: !If
            - SetupDns
            - !Sub
              - '${Project}-${Env}.sysops.${AWS::Region}.${Account}.monkapps.com'
              - Env: !FindInMap [ Environments, !Ref Environment, UrlAbbr ]
                Account: !If [ SetupInMMAccount, !If [ SetupInDevAccount, dev, aws], !Ref 'AWS::AccountId' ]
            - !Ref SysopsElasticIp
  DatabaseMasterUsername:
    Description: Database Master Username
    Condition: SetupDatabase
    Value: !Ref DatabaseMasterUsername
  DatabaseName:
    Description: Database Name
    Condition: SetupDatabase
    Value: !Ref DatabaseName
  DatabaseUsername:
    Description: Database Username
    Condition: SetupDatabase
    Value: !Ref DatabaseUsername
  DatabaseEndpoint:
    Description: MySQL node (internal use)
    Condition: SetupDatabase
    Value: !If [SetupDatabaseDns, !Ref DatabaseInternalDns, !GetAtt Database.Endpoint.Address]
  DatabaseEndpointExt:
    Description: MySQL node (external use)
    Condition: SetupDatabase
    Value: !GetAtt Database.Endpoint.Address
  RedisPrimaryEndpoint:
    Description: Redis Primary Endpoint
    Condition: SetupRedis
    Value: !If [SetupRedisDns, !Ref RedisInternalDns, !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address]
  LambdaVpc:
    Description: Lambda Vpc Id
    Condition: SetupLambdaInVpc
    Value: !Ref Vpc
    Export:
      Name: !Sub ${AWS::StackName}-lambda-vpc
  LambdaSubnet1:
    Description: Lambda Subnet 1 Id
    Condition: SetupLambdaInVpc
    Value: !Ref LambdaSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-lambda-subnet-1
  LambdaSubnet2:
    Description: Lambda Subnet 2 Id
    Condition: SetupLambdaInVpc
    Value: !Ref LambdaSubnet2
    Export:
      Name: !Sub ${AWS::StackName}-lambda-subnet-2
  LambdaSecurityGroupId:
    Description: Lambda SecurityGroup Id
    Condition: SetupLambdaInVpc
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-lambda-security-group
  S3Bucket:
    Description: Dynamic content bucket
    Condition: SetupS3Bucket
    Value: !Ref S3Bucket
  S3AccessKey:
    Description: S3 user access key
    Condition: SetupS3Bucket
    Value: !Ref S3UserAccessKey
  S3AccessSecret:
    Description: S3 user access secret
    Condition: SetupS3Bucket
    Value: !GetAtt S3UserAccessKey.SecretAccessKey
  AnsibleBucket:
    Description: The S3 Bucket used for Ansible releases
    Value: !Sub 'mm-hosting-${AWS::Region}-${AWS::AccountId}'
  NatGatewayIps:
    Description: Outgoing IP addresses for the private subnets
    Condition: SetupPrivateNetworks
    Value: !Sub
      - '${NatGateway1ElasticIp}${NatGateway2IfElasticIp}'
      - NatGateway2IfElasticIp: !If [SetupSecondaryNatGateway, !Sub ', ${NatGateway2ElasticIp}', '']
