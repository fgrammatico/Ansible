Resources:
# Generic VPC with only public subnet with InternetGateway:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
        # VPC will need internet access:     
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      DependsOn: VPC
  AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
# Can't attach an IGW to a VPC unless both are created:
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
    # Some route tables for our subnets:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
# Attach the public subnets to public route tables and attach the private subnets to private route tables:   
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable only SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 10.1.10.0/24
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
         Ref: VPC
  HTTPSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable HTTP access via port 80
      SecurityGroupIngress:
      - CidrIp: 10.1.10.0/24
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      VpcId:
         Ref: VPC
  HTTPSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable HTTPS access via port 443
      SecurityGroupIngress:
      - CidrIp: 10.1.10.0/24
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      VpcId:
         Ref: VPC
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Enable HTTPS,HTTP,SSH access via port 443,22,80
      SecurityGroupIngress:
      - CidrIp: 10.1.10.0/24
        FromPort: 443
        IpProtocol: tcp
        ToPort: 443
      - CidrIp: 10.1.10.0/24
        FromPort: 80
        IpProtocol: tcp
        ToPort: 80
      - CidrIp: 10.1.10.0/24
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
         Ref: VPC      
Outputs:
  StackSSHSecurityGroup:
    Description: The SSH Security Group of my VPC
    Value: !Ref SSHSecurityGroup
    Export:
      Name: SSH-Only-SecurityGroup
  StackHTTPSecurityGroup:
    Description: The HTTP Security Group of my VPC
    Value: !Ref HTTPSecurityGroup
    Export:
      Name: HTTP-Only-SecurityGroup
  StackHTTPSSecurityGroup:
    Description: The HTTPS Security Group of my VPC
    Value: !Ref HTTPSSecurityGroup
    Export:
      Name: HTTPS-Only-SecurityGroup
  StackWEBSecurityGroup:
    Description: The SSH Security Group of my VPC
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: Web-SecurityGroup
  StackVPC:
    Description: The VPC
    Value: !Ref VPC
    Export:
      Name: VPC
  StackSubnetA:
    Description: Public Subnet
    Value: !Ref PublicSubnetA
    Export:
      Name: Public-Subnet